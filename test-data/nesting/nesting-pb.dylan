Module: nesting

// *** This file was auto-generated by pbgen. ***
//     Source: nesting.proto
//     Date: 2024-01-21T16:38:38+00:00

// here's a comment!
define class <person> (<protocol-buffer-message>)
  slot person-name :: false-or(<string>),
    init-value: #f,
    init-keyword: name:;
  slot person-phones :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: phones:;
  slot person-phone :: false-or(<person-phone-number>),
    init-value: #f,
    init-keyword: phone:;
  slot person-type :: false-or(<person-phone-number>),
    init-value: #f,
    init-keyword: type:;
end class <person>;

define method add-person-phones
    (msg :: <person>, new :: <person-phone-number>) => (new :: <person-phone-number>)
  let v = msg.person-phones;
  if (~v)
    v := make(<stretchy-vector>);
    msg.person-phones := v;
  end;
  add!(v, new);
  new
end method add-person-phones;

define class <person-phone-number> (<protocol-buffer-message>)
  slot person-phone-number-number :: false-or(<string>),
    init-value: #f,
    init-keyword: number:;
  slot person-phone-number-type :: false-or(<person-phone-number-phone-type>),
    init-value: #f,
    init-keyword: type:;
end class <person-phone-number>;

define class <person-phone-number-phone-type> (<protocol-buffer-enum>) end;

define constant $person-phone-number-phone-type-mobile :: <person-phone-number-phone-type>
  = make(<person-phone-number-phone-type>,
         name: "MOBILE",
         value: 0);
define constant $person-phone-number-phone-type-home :: <person-phone-number-phone-type>
  = make(<person-phone-number-phone-type>,
         name: "HOME",
         value: 1);
define constant $person-phone-number-phone-type-work :: <person-phone-number-phone-type>
  = make(<person-phone-number-phone-type>,
         name: "WORK",
         value: 2);

//
// Introspection
//

define not-inline function initialize-<person-phone-number-phone-type> ()
  let values = make(<stretchy-vector>);
  let e = make(<enum-descriptor-proto>,
               name: "PhoneType",
               value: values);
  store("nesting.Person.PhoneNumber.PhoneType", e, <person-phone-number-phone-type>);
  let v = make(<enum-value-descriptor-proto>,
               name: "MOBILE",
               number: 0);
  add!(values, v);
  store("nesting.Person.PhoneNumber.PhoneType.MOBILE", v, $person-phone-number-phone-type-mobile);
  let v = make(<enum-value-descriptor-proto>,
               name: "HOME",
               number: 1);
  add!(values, v);
  store("nesting.Person.PhoneNumber.PhoneType.HOME", v, $person-phone-number-phone-type-home);
  let v = make(<enum-value-descriptor-proto>,
               name: "WORK",
               number: 2);
  add!(values, v);
  store("nesting.Person.PhoneNumber.PhoneType.WORK", v, $person-phone-number-phone-type-work);
end function initialize-<person-phone-number-phone-type>;
initialize-<person-phone-number-phone-type>();

define not-inline function initialize-<person-phone-number> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "PhoneNumber",
               field: fields);
  store("nesting.Person.PhoneNumber", m, <person-phone-number>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "number",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("nesting.Person.PhoneNumber.number", f, person-phone-number-number, person-phone-number-number-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "type",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "PhoneType",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("nesting.Person.PhoneNumber.type", f, person-phone-number-type, person-phone-number-type-setter, #f);
end function initialize-<person-phone-number>;
initialize-<person-phone-number>();

define not-inline function initialize-<person> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "Person",
               field: fields);
  store("nesting.Person", m, <person>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 1,
           label: $field-descriptor-proto-label-label-required,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("nesting.Person.name", f, person-name, person-name-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "phones",
           number: 4,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "PhoneNumber",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("nesting.Person.phones", f, person-phones, person-phones-setter, add-person-phones);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "phone",
           number: 5,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "PhoneNumber",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("nesting.Person.phone", f, person-phone, person-phone-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "type",
           number: 6,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "PhoneNumber",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("nesting.Person.type", f, person-type, person-type-setter, #f);
end function initialize-<person>;
initialize-<person>();

