Module: google-protobuf

// *** This file was auto-generated by pbgen. ***
//     Source: /home/cgay/dylan/workspaces/pb/protocol-buffers/test-data/descriptor.proto
//     Date: 2024-01-21T22:03:40+00:00

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// The messages in this file describe the definitions found in .proto files.
// A valid .proto file can be translated directly to a FileDescriptorProto
// without any other information (e.g. without reading its imports).
// descriptor.proto must be optimized for speed because reflection-based
// algorithms don't work during bootstrapping.
// The protocol compiler can output a FileDescriptorSet containing the .proto
// files it parses.
define class <file-descriptor-set> (<protocol-buffer-message>)
  slot file-descriptor-set-file :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: file:;
end class <file-descriptor-set>;

define method add-file-descriptor-set-file
    (msg :: <file-descriptor-set>, new :: <file-descriptor-proto>) => (new :: <file-descriptor-proto>)
  let v = msg.file-descriptor-set-file;
  if (~v)
    v := make(<stretchy-vector>);
    msg.file-descriptor-set-file := v;
  end;
  add!(v, new);
  new
end method add-file-descriptor-set-file;

// Describes a complete .proto file.
define class <file-descriptor-proto> (<protocol-buffer-message>)
  // file name, relative to root of source tree
  slot file-descriptor-proto-name :: false-or(<string>),
    init-value: #f,
    init-keyword: name:;
  // e.g. "foo", "foo.bar", etc.
  slot file-descriptor-proto-package :: false-or(<string>),
    init-value: #f,
    init-keyword: package:;
  // Names of files imported by this file.
  slot file-descriptor-proto-dependency :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: dependency:;
  // Indexes of the public imported files in the dependency list above.
  slot file-descriptor-proto-public-dependency :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: public-dependency:;
  // Indexes of the weak imported files in the dependency list.
  // For Google-internal migration only. Do not use.
  slot file-descriptor-proto-weak-dependency :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: weak-dependency:;
  // All top-level definitions in this file.
  slot file-descriptor-proto-message-type :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: message-type:;
  slot file-descriptor-proto-enum-type :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: enum-type:;
  slot file-descriptor-proto-service :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: service:;
  slot file-descriptor-proto-extension :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: extension:;
  slot file-descriptor-proto-options :: false-or(<file-options>),
    init-value: #f,
    init-keyword: options:;
  // This field contains optional information about the original source code.
  // You may safely remove this entire field without harming runtime
  // functionality of the descriptors -- the information is needed only by
  // development tools.
  slot file-descriptor-proto-source-code-info :: false-or(<source-code-info>),
    init-value: #f,
    init-keyword: source-code-info:;
  // The syntax of the proto file.
  // The supported values are "proto2", "proto3", and "editions".
  //
  // If `edition` is present, this value must be "editions".
  slot file-descriptor-proto-syntax :: false-or(<string>),
    init-value: #f,
    init-keyword: syntax:;
  // The edition of the proto file, which is an opaque string.
  slot file-descriptor-proto-edition :: false-or(<string>),
    init-value: #f,
    init-keyword: edition:;
end class <file-descriptor-proto>;

define method add-file-descriptor-proto-dependency
    (msg :: <file-descriptor-proto>, new :: <string>) => (new :: <string>)
  let v = msg.file-descriptor-proto-dependency;
  if (~v)
    v := make(<stretchy-vector>);
    msg.file-descriptor-proto-dependency := v;
  end;
  add!(v, new);
  new
end method add-file-descriptor-proto-dependency;

define method add-file-descriptor-proto-public-dependency
    (msg :: <file-descriptor-proto>, new :: <int32>) => (new :: <int32>)
  let v = msg.file-descriptor-proto-public-dependency;
  if (~v)
    v := make(<stretchy-vector>);
    msg.file-descriptor-proto-public-dependency := v;
  end;
  add!(v, new);
  new
end method add-file-descriptor-proto-public-dependency;

define method add-file-descriptor-proto-weak-dependency
    (msg :: <file-descriptor-proto>, new :: <int32>) => (new :: <int32>)
  let v = msg.file-descriptor-proto-weak-dependency;
  if (~v)
    v := make(<stretchy-vector>);
    msg.file-descriptor-proto-weak-dependency := v;
  end;
  add!(v, new);
  new
end method add-file-descriptor-proto-weak-dependency;

define method add-file-descriptor-proto-message-type
    (msg :: <file-descriptor-proto>, new :: <descriptor-proto>) => (new :: <descriptor-proto>)
  let v = msg.file-descriptor-proto-message-type;
  if (~v)
    v := make(<stretchy-vector>);
    msg.file-descriptor-proto-message-type := v;
  end;
  add!(v, new);
  new
end method add-file-descriptor-proto-message-type;

define method add-file-descriptor-proto-enum-type
    (msg :: <file-descriptor-proto>, new :: <enum-descriptor-proto>) => (new :: <enum-descriptor-proto>)
  let v = msg.file-descriptor-proto-enum-type;
  if (~v)
    v := make(<stretchy-vector>);
    msg.file-descriptor-proto-enum-type := v;
  end;
  add!(v, new);
  new
end method add-file-descriptor-proto-enum-type;

define method add-file-descriptor-proto-service
    (msg :: <file-descriptor-proto>, new :: <service-descriptor-proto>) => (new :: <service-descriptor-proto>)
  let v = msg.file-descriptor-proto-service;
  if (~v)
    v := make(<stretchy-vector>);
    msg.file-descriptor-proto-service := v;
  end;
  add!(v, new);
  new
end method add-file-descriptor-proto-service;

define method add-file-descriptor-proto-extension
    (msg :: <file-descriptor-proto>, new :: <field-descriptor-proto>) => (new :: <field-descriptor-proto>)
  let v = msg.file-descriptor-proto-extension;
  if (~v)
    v := make(<stretchy-vector>);
    msg.file-descriptor-proto-extension := v;
  end;
  add!(v, new);
  new
end method add-file-descriptor-proto-extension;

// Describes a message type.
define class <descriptor-proto> (<protocol-buffer-message>)
  slot descriptor-proto-name :: false-or(<string>),
    init-value: #f,
    init-keyword: name:;
  slot descriptor-proto-field :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: field:;
  slot descriptor-proto-extension :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: extension:;
  slot descriptor-proto-nested-type :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: nested-type:;
  slot descriptor-proto-enum-type :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: enum-type:;
  slot descriptor-proto-extension-range :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: extension-range:;
  slot descriptor-proto-oneof-decl :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: oneof-decl:;
  slot descriptor-proto-options :: false-or(<message-options>),
    init-value: #f,
    init-keyword: options:;
  slot descriptor-proto-reserved-range :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: reserved-range:;
  // Reserved field names, which may not be used by fields in the same message.
  // A given name may only be reserved once.
  slot descriptor-proto-reserved-name :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: reserved-name:;
end class <descriptor-proto>;

define method add-descriptor-proto-field
    (msg :: <descriptor-proto>, new :: <field-descriptor-proto>) => (new :: <field-descriptor-proto>)
  let v = msg.descriptor-proto-field;
  if (~v)
    v := make(<stretchy-vector>);
    msg.descriptor-proto-field := v;
  end;
  add!(v, new);
  new
end method add-descriptor-proto-field;

define method add-descriptor-proto-extension
    (msg :: <descriptor-proto>, new :: <field-descriptor-proto>) => (new :: <field-descriptor-proto>)
  let v = msg.descriptor-proto-extension;
  if (~v)
    v := make(<stretchy-vector>);
    msg.descriptor-proto-extension := v;
  end;
  add!(v, new);
  new
end method add-descriptor-proto-extension;

define method add-descriptor-proto-nested-type
    (msg :: <descriptor-proto>, new :: <descriptor-proto>) => (new :: <descriptor-proto>)
  let v = msg.descriptor-proto-nested-type;
  if (~v)
    v := make(<stretchy-vector>);
    msg.descriptor-proto-nested-type := v;
  end;
  add!(v, new);
  new
end method add-descriptor-proto-nested-type;

define method add-descriptor-proto-enum-type
    (msg :: <descriptor-proto>, new :: <enum-descriptor-proto>) => (new :: <enum-descriptor-proto>)
  let v = msg.descriptor-proto-enum-type;
  if (~v)
    v := make(<stretchy-vector>);
    msg.descriptor-proto-enum-type := v;
  end;
  add!(v, new);
  new
end method add-descriptor-proto-enum-type;

define method add-descriptor-proto-extension-range
    (msg :: <descriptor-proto>, new :: <descriptor-proto-extension-range>) => (new :: <descriptor-proto-extension-range>)
  let v = msg.descriptor-proto-extension-range;
  if (~v)
    v := make(<stretchy-vector>);
    msg.descriptor-proto-extension-range := v;
  end;
  add!(v, new);
  new
end method add-descriptor-proto-extension-range;

define method add-descriptor-proto-oneof-decl
    (msg :: <descriptor-proto>, new :: <oneof-descriptor-proto>) => (new :: <oneof-descriptor-proto>)
  let v = msg.descriptor-proto-oneof-decl;
  if (~v)
    v := make(<stretchy-vector>);
    msg.descriptor-proto-oneof-decl := v;
  end;
  add!(v, new);
  new
end method add-descriptor-proto-oneof-decl;

define method add-descriptor-proto-reserved-range
    (msg :: <descriptor-proto>, new :: <descriptor-proto-reserved-range>) => (new :: <descriptor-proto-reserved-range>)
  let v = msg.descriptor-proto-reserved-range;
  if (~v)
    v := make(<stretchy-vector>);
    msg.descriptor-proto-reserved-range := v;
  end;
  add!(v, new);
  new
end method add-descriptor-proto-reserved-range;

define method add-descriptor-proto-reserved-name
    (msg :: <descriptor-proto>, new :: <string>) => (new :: <string>)
  let v = msg.descriptor-proto-reserved-name;
  if (~v)
    v := make(<stretchy-vector>);
    msg.descriptor-proto-reserved-name := v;
  end;
  add!(v, new);
  new
end method add-descriptor-proto-reserved-name;

define class <descriptor-proto-extension-range> (<protocol-buffer-message>)
  // Inclusive.
  slot descriptor-proto-extension-range-start :: false-or(<int32>),
    init-value: #f,
    init-keyword: start:;
  // Exclusive.
  slot descriptor-proto-extension-range-end :: false-or(<int32>),
    init-value: #f,
    init-keyword: end:;
  slot descriptor-proto-extension-range-options :: false-or(<extension-range-options>),
    init-value: #f,
    init-keyword: options:;
end class <descriptor-proto-extension-range>;

// Range of reserved tag numbers. Reserved tag numbers may not be used by
// fields or extension ranges in the same message. Reserved ranges may
// not overlap.
define class <descriptor-proto-reserved-range> (<protocol-buffer-message>)
  // Inclusive.
  slot descriptor-proto-reserved-range-start :: false-or(<int32>),
    init-value: #f,
    init-keyword: start:;
  // Exclusive.
  slot descriptor-proto-reserved-range-end :: false-or(<int32>),
    init-value: #f,
    init-keyword: end:;
end class <descriptor-proto-reserved-range>;

define class <extension-range-options> (<protocol-buffer-message>)
  // The parser stores options it doesn't recognize here. See above.
  slot extension-range-options-uninterpreted-option :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: uninterpreted-option:;
end class <extension-range-options>;

define method add-extension-range-options-uninterpreted-option
    (msg :: <extension-range-options>, new :: <uninterpreted-option>) => (new :: <uninterpreted-option>)
  let v = msg.extension-range-options-uninterpreted-option;
  if (~v)
    v := make(<stretchy-vector>);
    msg.extension-range-options-uninterpreted-option := v;
  end;
  add!(v, new);
  new
end method add-extension-range-options-uninterpreted-option;

// Describes a field within a message.
define class <field-descriptor-proto> (<protocol-buffer-message>)
  slot field-descriptor-proto-name :: false-or(<string>),
    init-value: #f,
    init-keyword: name:;
  slot field-descriptor-proto-number :: false-or(<int32>),
    init-value: #f,
    init-keyword: number:;
  slot field-descriptor-proto-label :: false-or(<field-descriptor-proto-label>),
    init-value: #f,
    init-keyword: label:;
  // If type_name is set, this need not be set.  If both this and type_name
  // are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
  slot field-descriptor-proto-type :: false-or(<field-descriptor-proto-type>),
    init-value: #f,
    init-keyword: type:;
  // For message and enum types, this is the name of the type.  If the name
  // starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
  // rules are used to find the type (i.e. first the nested types within this
  // message are searched, then within the parent, on up to the root
  // namespace).
  slot field-descriptor-proto-type-name :: false-or(<string>),
    init-value: #f,
    init-keyword: type-name:;
  // For extensions, this is the name of the type being extended.  It is
  // resolved in the same manner as type_name.
  slot field-descriptor-proto-extendee :: false-or(<string>),
    init-value: #f,
    init-keyword: extendee:;
  // For numeric types, contains the original text representation of the value.
  // For booleans, "true" or "false".
  // For strings, contains the default text contents (not escaped in any way).
  // For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
  slot field-descriptor-proto-default-value :: false-or(<string>),
    init-value: #f,
    init-keyword: default-value:;
  // If set, gives the index of a oneof in the containing type's oneof_decl
  // list.  This field is a member of that oneof.
  slot field-descriptor-proto-oneof-index :: false-or(<int32>),
    init-value: #f,
    init-keyword: oneof-index:;
  // JSON name of this field. The value is set by protocol compiler. If the
  // user has set a "json_name" option on this field, that option's value
  // will be used. Otherwise, it's deduced from the field's name by converting
  // it to camelCase.
  slot field-descriptor-proto-json-name :: false-or(<string>),
    init-value: #f,
    init-keyword: json-name:;
  slot field-descriptor-proto-options :: false-or(<field-options>),
    init-value: #f,
    init-keyword: options:;
  // If true, this is a proto3 "optional". When a proto3 field is optional, it
  // tracks presence regardless of field type.
  //
  // When proto3_optional is true, this field must be belong to a oneof to
  // signal to old proto3 clients that presence is tracked for this field. This
  // oneof is known as a "synthetic" oneof, and this field must be its sole
  // member (each proto3 optional field gets its own synthetic oneof). Synthetic
  // oneofs exist in the descriptor only, and do not generate any API. Synthetic
  // oneofs must be ordered after all "real" oneofs.
  //
  // For message fields, proto3_optional doesn't create any semantic change,
  // since non-repeated message fields always track presence. However it still
  // indicates the semantic detail of whether the user wrote "optional" or not.
  // This can be useful for round-tripping the .proto file. For consistency we
  // give message fields a synthetic oneof also, even though it is not required
  // to track presence. This is especially important because the parser can't
  // tell if a field is a message or an enum, so it must always create a
  // synthetic oneof.
  //
  // Proto2 optional fields do not set this flag, because they already indicate
  // optional with `LABEL_OPTIONAL`.
  slot field-descriptor-proto-proto3-optional :: <boolean>,
    init-value: #f,
    init-keyword: proto3-optional:;
end class <field-descriptor-proto>;

define class <field-descriptor-proto-type> (<protocol-buffer-enum>) end;

// 0 is reserved for errors.
// Order is weird for historical reasons.
define constant $field-descriptor-proto-type-type-double :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_DOUBLE",
         value: 1);
define constant $field-descriptor-proto-type-type-float :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_FLOAT",
         value: 2);
// Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
// negative values are likely.
define constant $field-descriptor-proto-type-type-int64 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_INT64",
         value: 3);
define constant $field-descriptor-proto-type-type-uint64 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_UINT64",
         value: 4);
// Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
// negative values are likely.
define constant $field-descriptor-proto-type-type-int32 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_INT32",
         value: 5);
define constant $field-descriptor-proto-type-type-fixed64 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_FIXED64",
         value: 6);
define constant $field-descriptor-proto-type-type-fixed32 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_FIXED32",
         value: 7);
define constant $field-descriptor-proto-type-type-bool :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_BOOL",
         value: 8);
define constant $field-descriptor-proto-type-type-string :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_STRING",
         value: 9);
// Tag-delimited aggregate.
// Group type is deprecated and not supported in proto3. However, Proto3
// implementations should still be able to parse the group wire format and
// treat group fields as unknown fields.
define constant $field-descriptor-proto-type-type-group :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_GROUP",
         value: 10);
// Length-delimited aggregate.
define constant $field-descriptor-proto-type-type-message :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_MESSAGE",
         value: 11);
// New in version 2.
define constant $field-descriptor-proto-type-type-bytes :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_BYTES",
         value: 12);
define constant $field-descriptor-proto-type-type-uint32 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_UINT32",
         value: 13);
define constant $field-descriptor-proto-type-type-enum :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_ENUM",
         value: 14);
define constant $field-descriptor-proto-type-type-sfixed32 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_SFIXED32",
         value: 15);
define constant $field-descriptor-proto-type-type-sfixed64 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_SFIXED64",
         value: 16);
// Uses ZigZag encoding.
define constant $field-descriptor-proto-type-type-sint32 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_SINT32",
         value: 17);
// Uses ZigZag encoding.
define constant $field-descriptor-proto-type-type-sint64 :: <field-descriptor-proto-type>
  = make(<field-descriptor-proto-type>,
         name: "TYPE_SINT64",
         value: 18);

define class <field-descriptor-proto-label> (<protocol-buffer-enum>) end;

// 0 is reserved for errors
define constant $field-descriptor-proto-label-label-optional :: <field-descriptor-proto-label>
  = make(<field-descriptor-proto-label>,
         name: "LABEL_OPTIONAL",
         value: 1);
define constant $field-descriptor-proto-label-label-required :: <field-descriptor-proto-label>
  = make(<field-descriptor-proto-label>,
         name: "LABEL_REQUIRED",
         value: 2);
define constant $field-descriptor-proto-label-label-repeated :: <field-descriptor-proto-label>
  = make(<field-descriptor-proto-label>,
         name: "LABEL_REPEATED",
         value: 3);

// Describes a oneof.
define class <oneof-descriptor-proto> (<protocol-buffer-message>)
  slot oneof-descriptor-proto-name :: false-or(<string>),
    init-value: #f,
    init-keyword: name:;
  slot oneof-descriptor-proto-options :: false-or(<oneof-options>),
    init-value: #f,
    init-keyword: options:;
end class <oneof-descriptor-proto>;

// Describes an enum type.
define class <enum-descriptor-proto> (<protocol-buffer-message>)
  slot enum-descriptor-proto-name :: false-or(<string>),
    init-value: #f,
    init-keyword: name:;
  slot enum-descriptor-proto-value :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: value:;
  slot enum-descriptor-proto-options :: false-or(<enum-options>),
    init-value: #f,
    init-keyword: options:;
  // Range of reserved numeric values. Reserved numeric values may not be used
  // by enum values in the same enum declaration. Reserved ranges may not
  // overlap.
  slot enum-descriptor-proto-reserved-range :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: reserved-range:;
  // Reserved enum value names, which may not be reused. A given name may only
  // be reserved once.
  slot enum-descriptor-proto-reserved-name :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: reserved-name:;
end class <enum-descriptor-proto>;

define method add-enum-descriptor-proto-value
    (msg :: <enum-descriptor-proto>, new :: <enum-value-descriptor-proto>) => (new :: <enum-value-descriptor-proto>)
  let v = msg.enum-descriptor-proto-value;
  if (~v)
    v := make(<stretchy-vector>);
    msg.enum-descriptor-proto-value := v;
  end;
  add!(v, new);
  new
end method add-enum-descriptor-proto-value;

define method add-enum-descriptor-proto-reserved-range
    (msg :: <enum-descriptor-proto>, new :: <enum-descriptor-proto-enum-reserved-range>) => (new :: <enum-descriptor-proto-enum-reserved-range>)
  let v = msg.enum-descriptor-proto-reserved-range;
  if (~v)
    v := make(<stretchy-vector>);
    msg.enum-descriptor-proto-reserved-range := v;
  end;
  add!(v, new);
  new
end method add-enum-descriptor-proto-reserved-range;

define method add-enum-descriptor-proto-reserved-name
    (msg :: <enum-descriptor-proto>, new :: <string>) => (new :: <string>)
  let v = msg.enum-descriptor-proto-reserved-name;
  if (~v)
    v := make(<stretchy-vector>);
    msg.enum-descriptor-proto-reserved-name := v;
  end;
  add!(v, new);
  new
end method add-enum-descriptor-proto-reserved-name;

// Range of reserved numeric values. Reserved values may not be used by
// entries in the same enum. Reserved ranges may not overlap.
//
// Note that this is distinct from DescriptorProto.ReservedRange in that it
// is inclusive such that it can appropriately represent the entire int32
// domain.
define class <enum-descriptor-proto-enum-reserved-range> (<protocol-buffer-message>)
  // Inclusive.
  slot enum-descriptor-proto-enum-reserved-range-start :: false-or(<int32>),
    init-value: #f,
    init-keyword: start:;
  // Inclusive.
  slot enum-descriptor-proto-enum-reserved-range-end :: false-or(<int32>),
    init-value: #f,
    init-keyword: end:;
end class <enum-descriptor-proto-enum-reserved-range>;

// Describes a value within an enum.
define class <enum-value-descriptor-proto> (<protocol-buffer-message>)
  slot enum-value-descriptor-proto-name :: false-or(<string>),
    init-value: #f,
    init-keyword: name:;
  slot enum-value-descriptor-proto-number :: false-or(<int32>),
    init-value: #f,
    init-keyword: number:;
  slot enum-value-descriptor-proto-options :: false-or(<enum-value-options>),
    init-value: #f,
    init-keyword: options:;
end class <enum-value-descriptor-proto>;

// Describes a service.
define class <service-descriptor-proto> (<protocol-buffer-message>)
  slot service-descriptor-proto-name :: false-or(<string>),
    init-value: #f,
    init-keyword: name:;
  slot service-descriptor-proto-method :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: method:;
  slot service-descriptor-proto-options :: false-or(<service-options>),
    init-value: #f,
    init-keyword: options:;
end class <service-descriptor-proto>;

define method add-service-descriptor-proto-method
    (msg :: <service-descriptor-proto>, new :: <method-descriptor-proto>) => (new :: <method-descriptor-proto>)
  let v = msg.service-descriptor-proto-method;
  if (~v)
    v := make(<stretchy-vector>);
    msg.service-descriptor-proto-method := v;
  end;
  add!(v, new);
  new
end method add-service-descriptor-proto-method;

// Describes a method of a service.
define class <method-descriptor-proto> (<protocol-buffer-message>)
  slot method-descriptor-proto-name :: false-or(<string>),
    init-value: #f,
    init-keyword: name:;
  // Input and output type names.  These are resolved in the same way as
  // FieldDescriptorProto.type_name, but must refer to a message type.
  slot method-descriptor-proto-input-type :: false-or(<string>),
    init-value: #f,
    init-keyword: input-type:;
  slot method-descriptor-proto-output-type :: false-or(<string>),
    init-value: #f,
    init-keyword: output-type:;
  slot method-descriptor-proto-options :: false-or(<method-options>),
    init-value: #f,
    init-keyword: options:;
  // Identifies if client streams multiple client messages
  slot method-descriptor-proto-client-streaming :: <boolean>,
    init-value: #f,
    init-keyword: client-streaming:;
  // Identifies if server streams multiple server messages
  slot method-descriptor-proto-server-streaming :: <boolean>,
    init-value: #f,
    init-keyword: server-streaming:;
end class <method-descriptor-proto>;

// ===================================================================
// Options
// Each of the definitions above may have "options" attached.  These are
// just annotations which may cause code to be generated slightly differently
// or may contain hints for code that manipulates protocol messages.
//
// Clients may define custom options as extensions of the *Options messages.
// These extensions may not yet be known at parsing time, so the parser cannot
// store the values in them.  Instead it stores them in a field in the *Options
// message called uninterpreted_option. This field must have the same name
// across all *Options messages. We then use this field to populate the
// extensions when we build a descriptor, at which point all protos have been
// parsed and so all extensions are known.
//
// Extension numbers for custom options may be chosen as follows:
// * For options which will only be used within a single application or
//   organization, or for experimental options, use field numbers 50000
//   through 99999.  It is up to you to ensure that you do not use the
//   same number for multiple options.
// * For options which will be published and used publicly by multiple
//   independent entities, e-mail protobuf-global-extension-registry@google.com
//   to reserve extension numbers. Simply provide your project name (e.g.
//   Objective-C plugin) and your project website (if available) -- there's no
//   need to explain how you intend to use them. Usually you only need one
//   extension number. You can declare multiple options with only one extension
//   number by putting them in a sub-message. See the Custom Options section of
//   the docs for examples:
//   https://developers.google.com/protocol-buffers/docs/proto#options
//   If this turns out to be popular, a web service will be set up
//   to automatically assign option numbers.
define class <file-options> (<protocol-buffer-message>)
  // Sets the Java package where classes generated from this .proto will be
  // placed.  By default, the proto package is used, but this is often
  // inappropriate because proto packages do not normally start with backwards
  // domain names.
  slot file-options-java-package :: false-or(<string>),
    init-value: #f,
    init-keyword: java-package:;
  // Controls the name of the wrapper Java class generated for the .proto file.
  // That class will always contain the .proto file's getDescriptor() method as
  // well as any top-level extensions defined in the .proto file.
  // If java_multiple_files is disabled, then all the other classes from the
  // .proto file will be nested inside the single wrapper outer class.
  slot file-options-java-outer-classname :: false-or(<string>),
    init-value: #f,
    init-keyword: java-outer-classname:;
  // If enabled, then the Java code generator will generate a separate .java
  // file for each top-level message, enum, and service defined in the .proto
  // file.  Thus, these types will *not* be nested inside the wrapper class
  // named by java_outer_classname.  However, the wrapper class will still be
  // generated to contain the file's getDescriptor() method as well as any
  // top-level extensions defined in the file.
  slot file-options-java-multiple-files :: <boolean>,
    init-value: #f,
    init-keyword: java-multiple-files:;
  // This option does nothing.
  slot file-options-java-generate-equals-and-hash :: <boolean>,
    init-value: #f,
    init-keyword: java-generate-equals-and-hash:;
  // If set true, then the Java2 code generator will generate code that
  // throws an exception whenever an attempt is made to assign a non-UTF-8
  // byte sequence to a string field.
  // Message reflection will do the same.
  // However, an extension field still accepts non-UTF-8 byte sequences.
  // This option has no effect on when used with the lite runtime.
  slot file-options-java-string-check-utf8 :: <boolean>,
    init-value: #f,
    init-keyword: java-string-check-utf8:;
  slot file-options-optimize-for :: false-or(<file-options-optimize-mode>),
    init-value: #f,
    init-keyword: optimize-for:;
  // Sets the Go package where structs generated from this .proto will be
  // placed. If omitted, the Go package will be derived from the following:
  //   - The basename of the package import path, if provided.
  //   - Otherwise, the package statement in the .proto file, if present.
  //   - Otherwise, the basename of the .proto file, without extension.
  slot file-options-go-package :: false-or(<string>),
    init-value: #f,
    init-keyword: go-package:;
  // Should generic services be generated in each language?  "Generic" services
  // are not specific to any particular RPC system.  They are generated by the
  // main code generators in each language (without additional plugins).
  // Generic services were the only kind of service generation supported by
  // early versions of google.protobuf.
  //
  // Generic services are now considered deprecated in favor of using plugins
  // that generate code specific to your particular RPC system.  Therefore,
  // these default to false.  Old code which depends on generic services should
  // explicitly set them to true.
  slot file-options-cc-generic-services :: <boolean>,
    init-value: #f,
    init-keyword: cc-generic-services:;
  slot file-options-java-generic-services :: <boolean>,
    init-value: #f,
    init-keyword: java-generic-services:;
  slot file-options-py-generic-services :: <boolean>,
    init-value: #f,
    init-keyword: py-generic-services:;
  slot file-options-php-generic-services :: <boolean>,
    init-value: #f,
    init-keyword: php-generic-services:;
  // Is this file deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for everything in the file, or it will be completely ignored; in the very
  // least, this is a formalization for deprecating files.
  slot file-options-deprecated :: <boolean>,
    init-value: #f,
    init-keyword: deprecated:;
  // Enables the use of arenas for the proto messages in this file. This applies
  // only to generated classes for C++.
  slot file-options-cc-enable-arenas :: <boolean>,
    init-value: #f,
    init-keyword: cc-enable-arenas:;
  // Sets the objective c class prefix which is prepended to all objective c
  // generated classes from this .proto. There is no default.
  slot file-options-objc-class-prefix :: false-or(<string>),
    init-value: #f,
    init-keyword: objc-class-prefix:;
  // Namespace for generated classes; defaults to the package.
  slot file-options-csharp-namespace :: false-or(<string>),
    init-value: #f,
    init-keyword: csharp-namespace:;
  // By default Swift generators will take the proto package and CamelCase it
  // replacing '.' with underscore and use that to prefix the types/symbols
  // defined. When this options is provided, they will use this value instead
  // to prefix the types/symbols defined.
  slot file-options-swift-prefix :: false-or(<string>),
    init-value: #f,
    init-keyword: swift-prefix:;
  // Sets the php class prefix which is prepended to all php generated classes
  // from this .proto. Default is empty.
  slot file-options-php-class-prefix :: false-or(<string>),
    init-value: #f,
    init-keyword: php-class-prefix:;
  // Use this option to change the namespace of php generated classes. Default
  // is empty. When this option is empty, the package name will be used for
  // determining the namespace.
  slot file-options-php-namespace :: false-or(<string>),
    init-value: #f,
    init-keyword: php-namespace:;
  // Use this option to change the namespace of php generated metadata classes.
  // Default is empty. When this option is empty, the proto file name will be
  // used for determining the namespace.
  slot file-options-php-metadata-namespace :: false-or(<string>),
    init-value: #f,
    init-keyword: php-metadata-namespace:;
  // Use this option to change the package of ruby generated classes. Default
  // is empty. When this option is not set, the package name will be used for
  // determining the ruby package.
  slot file-options-ruby-package :: false-or(<string>),
    init-value: #f,
    init-keyword: ruby-package:;
  // The parser stores options it doesn't recognize here.
  // See the documentation for the "Options" section above.
  slot file-options-uninterpreted-option :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: uninterpreted-option:;
end class <file-options>;

define method add-file-options-uninterpreted-option
    (msg :: <file-options>, new :: <uninterpreted-option>) => (new :: <uninterpreted-option>)
  let v = msg.file-options-uninterpreted-option;
  if (~v)
    v := make(<stretchy-vector>);
    msg.file-options-uninterpreted-option := v;
  end;
  add!(v, new);
  new
end method add-file-options-uninterpreted-option;

// Generated classes can be optimized for speed or code size.
define class <file-options-optimize-mode> (<protocol-buffer-enum>) end;

// Generate complete code for parsing, serialization,
define constant $file-options-optimize-mode-speed :: <file-options-optimize-mode>
  = make(<file-options-optimize-mode>,
         name: "SPEED",
         value: 1);
// etc.
// Use ReflectionOps to implement these methods.
define constant $file-options-optimize-mode-code-size :: <file-options-optimize-mode>
  = make(<file-options-optimize-mode>,
         name: "CODE_SIZE",
         value: 2);
// Generate code using MessageLite and the lite runtime.
define constant $file-options-optimize-mode-lite-runtime :: <file-options-optimize-mode>
  = make(<file-options-optimize-mode>,
         name: "LITE_RUNTIME",
         value: 3);

define class <message-options> (<protocol-buffer-message>)
  // Set true to use the old proto1 MessageSet wire format for extensions.
  // This is provided for backwards-compatibility with the MessageSet wire
  // format.  You should not use this for any other reason:  It's less
  // efficient, has fewer features, and is more complicated.
  //
  // The message must be defined exactly as follows:
  //   message Foo {
  //     option message_set_wire_format = true;
  //     extensions 4 to max;
  //   }
  // Note that the message cannot have any defined fields; MessageSets only
  // have extensions.
  //
  // All extensions of your type must be singular messages; e.g. they cannot
  // be int32s, enums, or repeated messages.
  //
  // Because this is an option, the above two restrictions are not enforced by
  // the protocol compiler.
  slot message-options-message-set-wire-format :: <boolean>,
    init-value: #f,
    init-keyword: message-set-wire-format:;
  // Disables the generation of the standard "descriptor()" accessor, which can
  // conflict with a field of the same name.  This is meant to make migration
  // from proto1 easier; new code should avoid fields named "descriptor".
  slot message-options-no-standard-descriptor-accessor :: <boolean>,
    init-value: #f,
    init-keyword: no-standard-descriptor-accessor:;
  // Is this message deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the message, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating messages.
  slot message-options-deprecated :: <boolean>,
    init-value: #f,
    init-keyword: deprecated:;
  // Whether the message is an automatically generated map entry type for the
  // maps field.
  //
  // For maps fields:
  //     map<KeyType, ValueType> map_field = 1;
  // The parsed descriptor looks like:
  //     message MapFieldEntry {
  //         option map_entry = true;
  //         optional KeyType key = 1;
  //         optional ValueType value = 2;
  //     }
  //     repeated MapFieldEntry map_field = 1;
  //
  // Implementations may choose not to generate the map_entry=true message, but
  // use a native map in the target language to hold the keys and values.
  // The reflection APIs in such implementations still need to work as
  // if the field is a repeated message field.
  //
  // NOTE: Do not set the option in .proto files. Always use the maps syntax
  // instead. The option should only be implicitly set by the proto compiler
  // parser.
  slot message-options-map-entry :: <boolean>,
    init-value: #f,
    init-keyword: map-entry:;
  // The parser stores options it doesn't recognize here. See above.
  slot message-options-uninterpreted-option :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: uninterpreted-option:;
end class <message-options>;

define method add-message-options-uninterpreted-option
    (msg :: <message-options>, new :: <uninterpreted-option>) => (new :: <uninterpreted-option>)
  let v = msg.message-options-uninterpreted-option;
  if (~v)
    v := make(<stretchy-vector>);
    msg.message-options-uninterpreted-option := v;
  end;
  add!(v, new);
  new
end method add-message-options-uninterpreted-option;

define class <field-options> (<protocol-buffer-message>)
  // The ctype option instructs the C++ code generator to use a different
  // representation of the field than it normally would.  See the specific
  // options below.  This option is not yet implemented in the open source
  // release -- sorry, we'll try to include it in a future version!
  slot field-options-ctype :: false-or(<field-options-ctype>),
    init-value: #f,
    init-keyword: ctype:;
  // The packed option can be enabled for repeated primitive fields to enable
  // a more efficient representation on the wire. Rather than repeatedly
  // writing the tag and type for each element, the entire array is encoded as
  // a single length-delimited blob. In proto3, only explicit setting it to
  // false will avoid using packed encoding.
  slot field-options-packed :: <boolean>,
    init-value: #f,
    init-keyword: packed:;
  // The jstype option determines the JavaScript type used for values of the
  // field.  The option is permitted only for 64 bit integral and fixed types
  // (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
  // is represented as JavaScript string, which avoids loss of precision that
  // can happen when a large value is converted to a floating point JavaScript.
  // Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
  // use the JavaScript "number" type.  The behavior of the default option
  // JS_NORMAL is implementation dependent.
  //
  // This option is an enum to permit additional types to be added, e.g.
  // goog.math.Integer.
  slot field-options-jstype :: false-or(<field-options-js-type>),
    init-value: #f,
    init-keyword: jstype:;
  // Should this field be parsed lazily?  Lazy applies only to message-type
  // fields.  It means that when the outer message is initially parsed, the
  // inner message's contents will not be parsed but instead stored in encoded
  // form.  The inner message will actually be parsed when it is first accessed.
  //
  // This is only a hint.  Implementations are free to choose whether to use
  // eager or lazy parsing regardless of the value of this option.  However,
  // setting this option true suggests that the protocol author believes that
  // using lazy parsing on this field is worth the additional bookkeeping
  // overhead typically needed to implement it.
  //
  // This option does not affect the public interface of any generated code;
  // all method signatures remain the same.  Furthermore, thread-safety of the
  // interface is not affected by this option; const methods remain safe to
  // call from multiple threads concurrently, while non-const methods continue
  // to require exclusive access.
  //
  //
  // Note that implementations may choose not to check required fields within
  // a lazy sub-message.  That is, calling IsInitialized() on the outer message
  // may return true even if the inner message has missing required fields.
  // This is necessary because otherwise the inner message would have to be
  // parsed in order to perform the check, defeating the purpose of lazy
  // parsing.  An implementation which chooses not to check required fields
  // must be consistent about it.  That is, for any particular sub-message, the
  // implementation must either *always* check its required fields, or *never*
  // check its required fields, regardless of whether or not the message has
  // been parsed.
  //
  // As of May 2022, lazy verifies the contents of the byte stream during
  // parsing.  An invalid byte stream will cause the overall parsing to fail.
  slot field-options-lazy :: <boolean>,
    init-value: #f,
    init-keyword: lazy:;
  // unverified_lazy does no correctness checks on the byte stream. This should
  // only be used where lazy with verification is prohibitive for performance
  // reasons.
  slot field-options-unverified-lazy :: <boolean>,
    init-value: #f,
    init-keyword: unverified-lazy:;
  // Is this field deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for accessors, or it will be completely ignored; in the very least, this
  // is a formalization for deprecating fields.
  slot field-options-deprecated :: <boolean>,
    init-value: #f,
    init-keyword: deprecated:;
  // For Google-internal migration only. Do not use.
  slot field-options-weak :: <boolean>,
    init-value: #f,
    init-keyword: weak:;
  // The parser stores options it doesn't recognize here. See above.
  slot field-options-uninterpreted-option :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: uninterpreted-option:;
end class <field-options>;

define method add-field-options-uninterpreted-option
    (msg :: <field-options>, new :: <uninterpreted-option>) => (new :: <uninterpreted-option>)
  let v = msg.field-options-uninterpreted-option;
  if (~v)
    v := make(<stretchy-vector>);
    msg.field-options-uninterpreted-option := v;
  end;
  add!(v, new);
  new
end method add-field-options-uninterpreted-option;

define class <field-options-ctype> (<protocol-buffer-enum>) end;

// Default mode.
define constant $field-options-ctype-string :: <field-options-ctype>
  = make(<field-options-ctype>,
         name: "STRING",
         value: 0);
define constant $field-options-ctype-cord :: <field-options-ctype>
  = make(<field-options-ctype>,
         name: "CORD",
         value: 1);
define constant $field-options-ctype-string-piece :: <field-options-ctype>
  = make(<field-options-ctype>,
         name: "STRING_PIECE",
         value: 2);

define class <field-options-js-type> (<protocol-buffer-enum>) end;

// Use the default type.
define constant $field-options-js-type-js-normal :: <field-options-js-type>
  = make(<field-options-js-type>,
         name: "JS_NORMAL",
         value: 0);
// Use JavaScript strings.
define constant $field-options-js-type-js-string :: <field-options-js-type>
  = make(<field-options-js-type>,
         name: "JS_STRING",
         value: 1);
// Use JavaScript numbers.
define constant $field-options-js-type-js-number :: <field-options-js-type>
  = make(<field-options-js-type>,
         name: "JS_NUMBER",
         value: 2);

define class <oneof-options> (<protocol-buffer-message>)
  // The parser stores options it doesn't recognize here. See above.
  slot oneof-options-uninterpreted-option :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: uninterpreted-option:;
end class <oneof-options>;

define method add-oneof-options-uninterpreted-option
    (msg :: <oneof-options>, new :: <uninterpreted-option>) => (new :: <uninterpreted-option>)
  let v = msg.oneof-options-uninterpreted-option;
  if (~v)
    v := make(<stretchy-vector>);
    msg.oneof-options-uninterpreted-option := v;
  end;
  add!(v, new);
  new
end method add-oneof-options-uninterpreted-option;

define class <enum-options> (<protocol-buffer-message>)
  // Set this option to true to allow mapping different tag names to the same
  // value.
  slot enum-options-allow-alias :: <boolean>,
    init-value: #f,
    init-keyword: allow-alias:;
  // Is this enum deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the enum, or it will be completely ignored; in the very least, this
  // is a formalization for deprecating enums.
  slot enum-options-deprecated :: <boolean>,
    init-value: #f,
    init-keyword: deprecated:;
  // The parser stores options it doesn't recognize here. See above.
  slot enum-options-uninterpreted-option :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: uninterpreted-option:;
end class <enum-options>;

define method add-enum-options-uninterpreted-option
    (msg :: <enum-options>, new :: <uninterpreted-option>) => (new :: <uninterpreted-option>)
  let v = msg.enum-options-uninterpreted-option;
  if (~v)
    v := make(<stretchy-vector>);
    msg.enum-options-uninterpreted-option := v;
  end;
  add!(v, new);
  new
end method add-enum-options-uninterpreted-option;

define class <enum-value-options> (<protocol-buffer-message>)
  // Is this enum value deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the enum value, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating enum values.
  slot enum-value-options-deprecated :: <boolean>,
    init-value: #f,
    init-keyword: deprecated:;
  // The parser stores options it doesn't recognize here. See above.
  slot enum-value-options-uninterpreted-option :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: uninterpreted-option:;
end class <enum-value-options>;

define method add-enum-value-options-uninterpreted-option
    (msg :: <enum-value-options>, new :: <uninterpreted-option>) => (new :: <uninterpreted-option>)
  let v = msg.enum-value-options-uninterpreted-option;
  if (~v)
    v := make(<stretchy-vector>);
    msg.enum-value-options-uninterpreted-option := v;
  end;
  add!(v, new);
  new
end method add-enum-value-options-uninterpreted-option;

define class <service-options> (<protocol-buffer-message>)
  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
  //   framework.  We apologize for hoarding these numbers to ourselves, but
  //   we were already using them long before we decided to release Protocol
  //   Buffers.
  // Is this service deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the service, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating services.
  slot service-options-deprecated :: <boolean>,
    init-value: #f,
    init-keyword: deprecated:;
  // The parser stores options it doesn't recognize here. See above.
  slot service-options-uninterpreted-option :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: uninterpreted-option:;
end class <service-options>;

define method add-service-options-uninterpreted-option
    (msg :: <service-options>, new :: <uninterpreted-option>) => (new :: <uninterpreted-option>)
  let v = msg.service-options-uninterpreted-option;
  if (~v)
    v := make(<stretchy-vector>);
    msg.service-options-uninterpreted-option := v;
  end;
  add!(v, new);
  new
end method add-service-options-uninterpreted-option;

define class <method-options> (<protocol-buffer-message>)
  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
  //   framework.  We apologize for hoarding these numbers to ourselves, but
  //   we were already using them long before we decided to release Protocol
  //   Buffers.
  // Is this method deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the method, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating methods.
  slot method-options-deprecated :: <boolean>,
    init-value: #f,
    init-keyword: deprecated:;
  slot method-options-idempotency-level :: false-or(<method-options-idempotency-level>),
    init-value: #f,
    init-keyword: idempotency-level:;
  // The parser stores options it doesn't recognize here. See above.
  slot method-options-uninterpreted-option :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: uninterpreted-option:;
end class <method-options>;

define method add-method-options-uninterpreted-option
    (msg :: <method-options>, new :: <uninterpreted-option>) => (new :: <uninterpreted-option>)
  let v = msg.method-options-uninterpreted-option;
  if (~v)
    v := make(<stretchy-vector>);
    msg.method-options-uninterpreted-option := v;
  end;
  add!(v, new);
  new
end method add-method-options-uninterpreted-option;

// Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
// or neither? HTTP based RPC implementation may choose GET verb for safe
// methods, and PUT verb for idempotent methods instead of the default POST.
define class <method-options-idempotency-level> (<protocol-buffer-enum>) end;

define constant $method-options-idempotency-level-idempotency-unknown :: <method-options-idempotency-level>
  = make(<method-options-idempotency-level>,
         name: "IDEMPOTENCY_UNKNOWN",
         value: 0);
// implies idempotent
define constant $method-options-idempotency-level-no-side-effects :: <method-options-idempotency-level>
  = make(<method-options-idempotency-level>,
         name: "NO_SIDE_EFFECTS",
         value: 1);
// idempotent, but may have side effects
define constant $method-options-idempotency-level-idempotent :: <method-options-idempotency-level>
  = make(<method-options-idempotency-level>,
         name: "IDEMPOTENT",
         value: 2);

// A message representing a option the parser does not recognize. This only
// appears in options protos created by the compiler::Parser class.
// DescriptorPool resolves these when building Descriptor objects. Therefore,
// options protos in descriptor objects (e.g. returned by Descriptor::options(),
// or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
// in them.
define class <uninterpreted-option> (<protocol-buffer-message>)
  slot uninterpreted-option-name :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: name:;
  // The value of the uninterpreted option, in whatever type the tokenizer
  // identified it as during parsing. Exactly one of these should be set.
  slot uninterpreted-option-identifier-value :: false-or(<string>),
    init-value: #f,
    init-keyword: identifier-value:;
  slot uninterpreted-option-positive-int-value :: false-or(<uint64>),
    init-value: #f,
    init-keyword: positive-int-value:;
  slot uninterpreted-option-negative-int-value :: false-or(<int64>),
    init-value: #f,
    init-keyword: negative-int-value:;
  slot uninterpreted-option-double-value :: false-or(<double-float>),
    init-value: #f,
    init-keyword: double-value:;
  slot uninterpreted-option-string-value :: false-or(<byte-vector>),
    init-value: #f,
    init-keyword: string-value:;
  slot uninterpreted-option-aggregate-value :: false-or(<string>),
    init-value: #f,
    init-keyword: aggregate-value:;
end class <uninterpreted-option>;

define method add-uninterpreted-option-name
    (msg :: <uninterpreted-option>, new :: <uninterpreted-option-name-part>) => (new :: <uninterpreted-option-name-part>)
  let v = msg.uninterpreted-option-name;
  if (~v)
    v := make(<stretchy-vector>);
    msg.uninterpreted-option-name := v;
  end;
  add!(v, new);
  new
end method add-uninterpreted-option-name;

// The name of the uninterpreted option.  Each string represents a segment in
// a dot-separated name.  is_extension is true iff a segment represents an
// extension (denoted with parentheses in options specs in .proto files).
// E.g.,{ ["foo", false], ["bar.baz", true], ["moo", false] } represents
// "foo.(bar.baz).moo".
define class <uninterpreted-option-name-part> (<protocol-buffer-message>)
  slot uninterpreted-option-name-part-name-part :: false-or(<string>),
    init-value: #f,
    init-keyword: name-part:;
  slot uninterpreted-option-name-part-is-extension :: <boolean>,
    init-value: #f,
    init-keyword: is-extension:;
end class <uninterpreted-option-name-part>;

// ===================================================================
// Optional source code info
// Encapsulates information about the original source file from which a
// FileDescriptorProto was generated.
define class <source-code-info> (<protocol-buffer-message>)
  // A Location identifies a piece of source code in a .proto file which
  // corresponds to a particular definition.  This information is intended
  // to be useful to IDEs, code indexers, documentation generators, and similar
  // tools.
  //
  // For example, say we have a file like:
  //   message Foo {
  //     optional string foo = 1;
  //   }
  // Let's look at just the field definition:
  //   optional string foo = 1;
  //   ^       ^^     ^^  ^  ^^^
  //   a       bc     de  f  ghi
  // We have the following locations:
  //   span   path               represents
  //   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
  //   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
  //   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
  //   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
  //   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
  //
  // Notes:
  // - A location may refer to a repeated field itself (i.e. not to any
  //   particular index within it).  This is used whenever a set of elements are
  //   logically enclosed in a single code segment.  For example, an entire
  //   extend block (possibly containing multiple extension definitions) will
  //   have an outer location whose path refers to the "extensions" repeated
  //   field without an index.
  // - Multiple locations may have the same path.  This happens when a single
  //   logical declaration is spread out across multiple places.  The most
  //   obvious example is the "extend" block again -- there may be multiple
  //   extend blocks in the same scope, each of which will have the same path.
  // - A location's span is not always a subset of its parent's span.  For
  //   example, the "extendee" of an extension declaration appears at the
  //   beginning of the "extend" block and is shared by all extensions within
  //   the block.
  // - Just because a location's span is a subset of some other location's span
  //   does not mean that it is a descendant.  For example, a "group" defines
  //   both a type and a field in a single declaration.  Thus, the locations
  //   corresponding to the type and field and their components will overlap.
  // - Code which tries to interpret locations should probably be designed to
  //   ignore those that it doesn't understand, as more types of locations could
  //   be recorded in the future.
  slot source-code-info-location :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: location:;
end class <source-code-info>;

define method add-source-code-info-location
    (msg :: <source-code-info>, new :: <source-code-info-location>) => (new :: <source-code-info-location>)
  let v = msg.source-code-info-location;
  if (~v)
    v := make(<stretchy-vector>);
    msg.source-code-info-location := v;
  end;
  add!(v, new);
  new
end method add-source-code-info-location;

define class <source-code-info-location> (<protocol-buffer-message>)
  // Identifies which part of the FileDescriptorProto was defined at this
  // location.
  //
  // Each element is a field number or an index.  They form a path from
  // the root FileDescriptorProto to the place where the definition occurs.
  // For example, this path:
  //   [ 4, 3, 2, 7, 1 ]
  // refers to:
  //   file.message_type(3)  // 4, 3
  //       .field(7)         // 2, 7
  //       .name()           // 1
  // This is because FileDescriptorProto.message_type has field number 4:
  //   repeated DescriptorProto message_type = 4;
  // and DescriptorProto.field has field number 2:
  //   repeated FieldDescriptorProto field = 2;
  // and FieldDescriptorProto.name has field number 1:
  //   optional string name = 1;
  //
  // Thus, the above path gives the location of a field name.  If we removed
  // the last element:
  //   [ 4, 3, 2, 7 ]
  // this path refers to the whole field declaration (from the beginning
  // of the label to the terminating semicolon).
  slot source-code-info-location-path :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: path:;
  // Always has exactly three or four elements: start line, start column,
  // end line (optional, otherwise assumed same as start line), end column.
  // These are packed into a single field for efficiency.  Note that line
  // and column numbers are zero-based -- typically you will want to add
  // 1 to each before displaying to a user.
  slot source-code-info-location-span :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: span:;
  // If this SourceCodeInfo represents a complete declaration, these are any
  // comments appearing before and after the declaration which appear to be
  // attached to the declaration.
  //
  // A series of line comments appearing on consecutive lines, with no other
  // tokens appearing on those lines, will be treated as a single comment.
  //
  // leading_detached_comments will keep paragraphs of comments that appear
  // before (but not connected to) the current element. Each paragraph,
  // separated by empty lines, will be one comment element in the repeated
  // field.
  //
  // Only the comment content is provided; comment markers (e.g. //) are
  // stripped out.  For block comments, leading whitespace and an asterisk
  // will be stripped from the beginning of each line other than the first.
  // Newlines are included in the output.
  //
  // Examples:
  //
  //   optional int32 foo = 1;  // Comment attached to foo.
  //   // Comment attached to bar.
  //   optional int32 bar = 2;
  //
  //   optional string baz = 3;
  //   // Comment attached to baz.
  //   // Another line attached to baz.
  //
  //   // Comment attached to moo.
  //   //
  //   // Another line attached to moo.
  //   optional double moo = 4;
  //
  //   // Detached comment for corge. This is not leading or trailing comments
  //   // to moo or corge because there are blank lines separating it from
  //   // both.
  //
  //   // Detached comment for corge paragraph 2.
  //
  //   optional string corge = 5;
  //   /* Block comment attached
  //    * to corge.  Leading asterisks
  //    * will be removed. */
  //   /* Block comment attached to
  //    * grault. */
  //   optional int32 grault = 6;
  //
  //   // ignored detached comments.
  slot source-code-info-location-leading-comments :: false-or(<string>),
    init-value: #f,
    init-keyword: leading-comments:;
  slot source-code-info-location-trailing-comments :: false-or(<string>),
    init-value: #f,
    init-keyword: trailing-comments:;
  slot source-code-info-location-leading-detached-comments :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: leading-detached-comments:;
end class <source-code-info-location>;

define method add-source-code-info-location-path
    (msg :: <source-code-info-location>, new :: <int32>) => (new :: <int32>)
  let v = msg.source-code-info-location-path;
  if (~v)
    v := make(<stretchy-vector>);
    msg.source-code-info-location-path := v;
  end;
  add!(v, new);
  new
end method add-source-code-info-location-path;

define method add-source-code-info-location-span
    (msg :: <source-code-info-location>, new :: <int32>) => (new :: <int32>)
  let v = msg.source-code-info-location-span;
  if (~v)
    v := make(<stretchy-vector>);
    msg.source-code-info-location-span := v;
  end;
  add!(v, new);
  new
end method add-source-code-info-location-span;

define method add-source-code-info-location-leading-detached-comments
    (msg :: <source-code-info-location>, new :: <string>) => (new :: <string>)
  let v = msg.source-code-info-location-leading-detached-comments;
  if (~v)
    v := make(<stretchy-vector>);
    msg.source-code-info-location-leading-detached-comments := v;
  end;
  add!(v, new);
  new
end method add-source-code-info-location-leading-detached-comments;

// Describes the relationship between generated code and its original source
// file. A GeneratedCodeInfo message is associated with only one generated
// source file, but may contain references to different source .proto files.
define class <generated-code-info> (<protocol-buffer-message>)
  // An Annotation connects some span of text in generated code to an element
  // of its generating .proto file.
  slot generated-code-info-annotation :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: annotation:;
end class <generated-code-info>;

define method add-generated-code-info-annotation
    (msg :: <generated-code-info>, new :: <generated-code-info-annotation>) => (new :: <generated-code-info-annotation>)
  let v = msg.generated-code-info-annotation;
  if (~v)
    v := make(<stretchy-vector>);
    msg.generated-code-info-annotation := v;
  end;
  add!(v, new);
  new
end method add-generated-code-info-annotation;

define class <generated-code-info-annotation> (<protocol-buffer-message>)
  // Identifies the element in the original source .proto file. This field
  // is formatted the same as SourceCodeInfo.Location.path.
  slot generated-code-info-annotation-path :: false-or(<stretchy-vector>),
    init-value: #f,
    init-keyword: path:;
  // Identifies the filesystem path to the original source .proto.
  slot generated-code-info-annotation-source-file :: false-or(<string>),
    init-value: #f,
    init-keyword: source-file:;
  // Identifies the starting offset in bytes in the generated code
  // that relates to the identified object.
  slot generated-code-info-annotation-begin :: false-or(<int32>),
    init-value: #f,
    init-keyword: begin:;
  // Identifies the ending offset in bytes in the generated code that
  // relates to the identified object. The end offset should be one past
  // the last relevant byte (so the length of the text = end - begin).
  slot generated-code-info-annotation-end :: false-or(<int32>),
    init-value: #f,
    init-keyword: end:;
  slot generated-code-info-annotation-semantic :: false-or(<generated-code-info-annotation-semantic>),
    init-value: #f,
    init-keyword: semantic:;
end class <generated-code-info-annotation>;

define method add-generated-code-info-annotation-path
    (msg :: <generated-code-info-annotation>, new :: <int32>) => (new :: <int32>)
  let v = msg.generated-code-info-annotation-path;
  if (~v)
    v := make(<stretchy-vector>);
    msg.generated-code-info-annotation-path := v;
  end;
  add!(v, new);
  new
end method add-generated-code-info-annotation-path;

// Represents the identified object's effect on the element in the original
// .proto file.
define class <generated-code-info-annotation-semantic> (<protocol-buffer-enum>) end;

// There is no effect or the effect is indescribable.
define constant $generated-code-info-annotation-semantic-none :: <generated-code-info-annotation-semantic>
  = make(<generated-code-info-annotation-semantic>,
         name: "NONE",
         value: 0);
// The element is set or otherwise mutated.
define constant $generated-code-info-annotation-semantic-set :: <generated-code-info-annotation-semantic>
  = make(<generated-code-info-annotation-semantic>,
         name: "SET",
         value: 1);
// An alias to the element is returned.
define constant $generated-code-info-annotation-semantic-alias :: <generated-code-info-annotation-semantic>
  = make(<generated-code-info-annotation-semantic>,
         name: "ALIAS",
         value: 2);

//
// Introspection
//

define not-inline function initialize-<file-descriptor-set> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "FileDescriptorSet",
               field: fields);
  store("google.protobuf.FileDescriptorSet", m, <file-descriptor-set>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "file",
           number: 1,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "FileDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorSet.file", f, file-descriptor-set-file, file-descriptor-set-file-setter, add-file-descriptor-set-file);
end function initialize-<file-descriptor-set>;
initialize-<file-descriptor-set>();

define not-inline function initialize-<file-descriptor-proto> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "FileDescriptorProto",
               field: fields);
  store("google.protobuf.FileDescriptorProto", m, <file-descriptor-proto>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.name", f, file-descriptor-proto-name, file-descriptor-proto-name-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "package",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.package", f, file-descriptor-proto-package, file-descriptor-proto-package-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "dependency",
           number: 3,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.dependency", f, file-descriptor-proto-dependency, file-descriptor-proto-dependency-setter, add-file-descriptor-proto-dependency);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "public_dependency",
           number: 10,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.public_dependency", f, file-descriptor-proto-public-dependency, file-descriptor-proto-public-dependency-setter, add-file-descriptor-proto-public-dependency);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "weak_dependency",
           number: 11,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.weak_dependency", f, file-descriptor-proto-weak-dependency, file-descriptor-proto-weak-dependency-setter, add-file-descriptor-proto-weak-dependency);
  let f5opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "message_type",
           number: 4,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "DescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f5opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.message_type", f, file-descriptor-proto-message-type, file-descriptor-proto-message-type-setter, add-file-descriptor-proto-message-type);
  let f6opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "enum_type",
           number: 5,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "EnumDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f6opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.enum_type", f, file-descriptor-proto-enum-type, file-descriptor-proto-enum-type-setter, add-file-descriptor-proto-enum-type);
  let f7opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "service",
           number: 6,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "ServiceDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f7opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.service", f, file-descriptor-proto-service, file-descriptor-proto-service-setter, add-file-descriptor-proto-service);
  let f8opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "extension",
           number: 7,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "FieldDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f8opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.extension", f, file-descriptor-proto-extension, file-descriptor-proto-extension-setter, add-file-descriptor-proto-extension);
  let f9opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "options",
           number: 8,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "FileOptions",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f9opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.options", f, file-descriptor-proto-options, file-descriptor-proto-options-setter, #f);
  let f10opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "source_code_info",
           number: 9,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "SourceCodeInfo",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f10opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.source_code_info", f, file-descriptor-proto-source-code-info, file-descriptor-proto-source-code-info-setter, #f);
  let f11opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "syntax",
           number: 12,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f11opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.syntax", f, file-descriptor-proto-syntax, file-descriptor-proto-syntax-setter, #f);
  let f12opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "edition",
           number: 13,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f12opt);
  add!(fields, f);
  store("google.protobuf.FileDescriptorProto.edition", f, file-descriptor-proto-edition, file-descriptor-proto-edition-setter, #f);
end function initialize-<file-descriptor-proto>;
initialize-<file-descriptor-proto>();

define not-inline function initialize-<descriptor-proto-extension-range> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "ExtensionRange",
               field: fields);
  store("google.protobuf.DescriptorProto.ExtensionRange", m, <descriptor-proto-extension-range>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "start",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.ExtensionRange.start", f, descriptor-proto-extension-range-start, descriptor-proto-extension-range-start-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "end",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.ExtensionRange.end", f, descriptor-proto-extension-range-end, descriptor-proto-extension-range-end-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "options",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "ExtensionRangeOptions",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.ExtensionRange.options", f, descriptor-proto-extension-range-options, descriptor-proto-extension-range-options-setter, #f);
end function initialize-<descriptor-proto-extension-range>;
initialize-<descriptor-proto-extension-range>();

define not-inline function initialize-<descriptor-proto-reserved-range> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "ReservedRange",
               field: fields);
  store("google.protobuf.DescriptorProto.ReservedRange", m, <descriptor-proto-reserved-range>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "start",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.ReservedRange.start", f, descriptor-proto-reserved-range-start, descriptor-proto-reserved-range-start-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "end",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.ReservedRange.end", f, descriptor-proto-reserved-range-end, descriptor-proto-reserved-range-end-setter, #f);
end function initialize-<descriptor-proto-reserved-range>;
initialize-<descriptor-proto-reserved-range>();

define not-inline function initialize-<descriptor-proto> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "DescriptorProto",
               field: fields);
  store("google.protobuf.DescriptorProto", m, <descriptor-proto>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.name", f, descriptor-proto-name, descriptor-proto-name-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "field",
           number: 2,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "FieldDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.field", f, descriptor-proto-field, descriptor-proto-field-setter, add-descriptor-proto-field);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "extension",
           number: 6,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "FieldDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.extension", f, descriptor-proto-extension, descriptor-proto-extension-setter, add-descriptor-proto-extension);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "nested_type",
           number: 3,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "DescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.nested_type", f, descriptor-proto-nested-type, descriptor-proto-nested-type-setter, add-descriptor-proto-nested-type);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "enum_type",
           number: 4,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "EnumDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.enum_type", f, descriptor-proto-enum-type, descriptor-proto-enum-type-setter, add-descriptor-proto-enum-type);
  let f5opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "extension_range",
           number: 5,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "ExtensionRange",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f5opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.extension_range", f, descriptor-proto-extension-range, descriptor-proto-extension-range-setter, add-descriptor-proto-extension-range);
  let f6opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "oneof_decl",
           number: 8,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "OneofDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f6opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.oneof_decl", f, descriptor-proto-oneof-decl, descriptor-proto-oneof-decl-setter, add-descriptor-proto-oneof-decl);
  let f7opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "options",
           number: 7,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "MessageOptions",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f7opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.options", f, descriptor-proto-options, descriptor-proto-options-setter, #f);
  let f8opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "reserved_range",
           number: 9,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "ReservedRange",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f8opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.reserved_range", f, descriptor-proto-reserved-range, descriptor-proto-reserved-range-setter, add-descriptor-proto-reserved-range);
  let f9opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "reserved_name",
           number: 10,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f9opt);
  add!(fields, f);
  store("google.protobuf.DescriptorProto.reserved_name", f, descriptor-proto-reserved-name, descriptor-proto-reserved-name-setter, add-descriptor-proto-reserved-name);
end function initialize-<descriptor-proto>;
initialize-<descriptor-proto>();

define not-inline function initialize-<extension-range-options> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "ExtensionRangeOptions",
               field: fields);
  store("google.protobuf.ExtensionRangeOptions", m, <extension-range-options>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "uninterpreted_option",
           number: 999,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "UninterpretedOption",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.ExtensionRangeOptions.uninterpreted_option", f, extension-range-options-uninterpreted-option, extension-range-options-uninterpreted-option-setter, add-extension-range-options-uninterpreted-option);
end function initialize-<extension-range-options>;
initialize-<extension-range-options>();

define not-inline function initialize-<field-descriptor-proto-type> ()
  let values = make(<stretchy-vector>);
  let e = make(<enum-descriptor-proto>,
               name: "Type",
               value: values);
  store("google.protobuf.FieldDescriptorProto.Type", e, <field-descriptor-proto-type>);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_DOUBLE",
               number: 1);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE", v, $field-descriptor-proto-type-type-double);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_FLOAT",
               number: 2);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_FLOAT", v, $field-descriptor-proto-type-type-float);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_INT64",
               number: 3);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_INT64", v, $field-descriptor-proto-type-type-int64);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_UINT64",
               number: 4);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_UINT64", v, $field-descriptor-proto-type-type-uint64);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_INT32",
               number: 5);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_INT32", v, $field-descriptor-proto-type-type-int32);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_FIXED64",
               number: 6);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED64", v, $field-descriptor-proto-type-type-fixed64);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_FIXED32",
               number: 7);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED32", v, $field-descriptor-proto-type-type-fixed32);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_BOOL",
               number: 8);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_BOOL", v, $field-descriptor-proto-type-type-bool);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_STRING",
               number: 9);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_STRING", v, $field-descriptor-proto-type-type-string);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_GROUP",
               number: 10);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_GROUP", v, $field-descriptor-proto-type-type-group);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_MESSAGE",
               number: 11);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_MESSAGE", v, $field-descriptor-proto-type-type-message);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_BYTES",
               number: 12);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_BYTES", v, $field-descriptor-proto-type-type-bytes);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_UINT32",
               number: 13);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_UINT32", v, $field-descriptor-proto-type-type-uint32);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_ENUM",
               number: 14);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_ENUM", v, $field-descriptor-proto-type-type-enum);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_SFIXED32",
               number: 15);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED32", v, $field-descriptor-proto-type-type-sfixed32);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_SFIXED64",
               number: 16);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED64", v, $field-descriptor-proto-type-type-sfixed64);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_SINT32",
               number: 17);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_SINT32", v, $field-descriptor-proto-type-type-sint32);
  let v = make(<enum-value-descriptor-proto>,
               name: "TYPE_SINT64",
               number: 18);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Type.TYPE_SINT64", v, $field-descriptor-proto-type-type-sint64);
end function initialize-<field-descriptor-proto-type>;
initialize-<field-descriptor-proto-type>();

define not-inline function initialize-<field-descriptor-proto-label> ()
  let values = make(<stretchy-vector>);
  let e = make(<enum-descriptor-proto>,
               name: "Label",
               value: values);
  store("google.protobuf.FieldDescriptorProto.Label", e, <field-descriptor-proto-label>);
  let v = make(<enum-value-descriptor-proto>,
               name: "LABEL_OPTIONAL",
               number: 1);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Label.LABEL_OPTIONAL", v, $field-descriptor-proto-label-label-optional);
  let v = make(<enum-value-descriptor-proto>,
               name: "LABEL_REQUIRED",
               number: 2);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Label.LABEL_REQUIRED", v, $field-descriptor-proto-label-label-required);
  let v = make(<enum-value-descriptor-proto>,
               name: "LABEL_REPEATED",
               number: 3);
  add!(values, v);
  store("google.protobuf.FieldDescriptorProto.Label.LABEL_REPEATED", v, $field-descriptor-proto-label-label-repeated);
end function initialize-<field-descriptor-proto-label>;
initialize-<field-descriptor-proto-label>();

define not-inline function initialize-<field-descriptor-proto> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "FieldDescriptorProto",
               field: fields);
  store("google.protobuf.FieldDescriptorProto", m, <field-descriptor-proto>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.name", f, field-descriptor-proto-name, field-descriptor-proto-name-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "number",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.number", f, field-descriptor-proto-number, field-descriptor-proto-number-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "label",
           number: 4,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "Label",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.label", f, field-descriptor-proto-label, field-descriptor-proto-label-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "type",
           number: 5,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "Type",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.type", f, field-descriptor-proto-type, field-descriptor-proto-type-setter, #f);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "type_name",
           number: 6,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.type_name", f, field-descriptor-proto-type-name, field-descriptor-proto-type-name-setter, #f);
  let f5opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "extendee",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f5opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.extendee", f, field-descriptor-proto-extendee, field-descriptor-proto-extendee-setter, #f);
  let f6opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "default_value",
           number: 7,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f6opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.default_value", f, field-descriptor-proto-default-value, field-descriptor-proto-default-value-setter, #f);
  let f7opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "oneof_index",
           number: 9,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f7opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.oneof_index", f, field-descriptor-proto-oneof-index, field-descriptor-proto-oneof-index-setter, #f);
  let f8opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "json_name",
           number: 10,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f8opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.json_name", f, field-descriptor-proto-json-name, field-descriptor-proto-json-name-setter, #f);
  let f9opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "options",
           number: 8,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "FieldOptions",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f9opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.options", f, field-descriptor-proto-options, field-descriptor-proto-options-setter, #f);
  let f10opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "proto3_optional",
           number: 17,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f10opt);
  add!(fields, f);
  store("google.protobuf.FieldDescriptorProto.proto3_optional", f, field-descriptor-proto-proto3-optional, field-descriptor-proto-proto3-optional-setter, #f);
end function initialize-<field-descriptor-proto>;
initialize-<field-descriptor-proto>();

define not-inline function initialize-<oneof-descriptor-proto> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "OneofDescriptorProto",
               field: fields);
  store("google.protobuf.OneofDescriptorProto", m, <oneof-descriptor-proto>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.OneofDescriptorProto.name", f, oneof-descriptor-proto-name, oneof-descriptor-proto-name-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "options",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "OneofOptions",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.OneofDescriptorProto.options", f, oneof-descriptor-proto-options, oneof-descriptor-proto-options-setter, #f);
end function initialize-<oneof-descriptor-proto>;
initialize-<oneof-descriptor-proto>();

define not-inline function initialize-<enum-descriptor-proto-enum-reserved-range> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "EnumReservedRange",
               field: fields);
  store("google.protobuf.EnumDescriptorProto.EnumReservedRange", m, <enum-descriptor-proto-enum-reserved-range>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "start",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.EnumDescriptorProto.EnumReservedRange.start", f, enum-descriptor-proto-enum-reserved-range-start, enum-descriptor-proto-enum-reserved-range-start-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "end",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.EnumDescriptorProto.EnumReservedRange.end", f, enum-descriptor-proto-enum-reserved-range-end, enum-descriptor-proto-enum-reserved-range-end-setter, #f);
end function initialize-<enum-descriptor-proto-enum-reserved-range>;
initialize-<enum-descriptor-proto-enum-reserved-range>();

define not-inline function initialize-<enum-descriptor-proto> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "EnumDescriptorProto",
               field: fields);
  store("google.protobuf.EnumDescriptorProto", m, <enum-descriptor-proto>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.EnumDescriptorProto.name", f, enum-descriptor-proto-name, enum-descriptor-proto-name-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "value",
           number: 2,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "EnumValueDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.EnumDescriptorProto.value", f, enum-descriptor-proto-value, enum-descriptor-proto-value-setter, add-enum-descriptor-proto-value);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "options",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "EnumOptions",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.EnumDescriptorProto.options", f, enum-descriptor-proto-options, enum-descriptor-proto-options-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "reserved_range",
           number: 4,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "EnumReservedRange",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.EnumDescriptorProto.reserved_range", f, enum-descriptor-proto-reserved-range, enum-descriptor-proto-reserved-range-setter, add-enum-descriptor-proto-reserved-range);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "reserved_name",
           number: 5,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.EnumDescriptorProto.reserved_name", f, enum-descriptor-proto-reserved-name, enum-descriptor-proto-reserved-name-setter, add-enum-descriptor-proto-reserved-name);
end function initialize-<enum-descriptor-proto>;
initialize-<enum-descriptor-proto>();

define not-inline function initialize-<enum-value-descriptor-proto> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "EnumValueDescriptorProto",
               field: fields);
  store("google.protobuf.EnumValueDescriptorProto", m, <enum-value-descriptor-proto>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.EnumValueDescriptorProto.name", f, enum-value-descriptor-proto-name, enum-value-descriptor-proto-name-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "number",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.EnumValueDescriptorProto.number", f, enum-value-descriptor-proto-number, enum-value-descriptor-proto-number-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "options",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "EnumValueOptions",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.EnumValueDescriptorProto.options", f, enum-value-descriptor-proto-options, enum-value-descriptor-proto-options-setter, #f);
end function initialize-<enum-value-descriptor-proto>;
initialize-<enum-value-descriptor-proto>();

define not-inline function initialize-<service-descriptor-proto> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "ServiceDescriptorProto",
               field: fields);
  store("google.protobuf.ServiceDescriptorProto", m, <service-descriptor-proto>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.ServiceDescriptorProto.name", f, service-descriptor-proto-name, service-descriptor-proto-name-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "method",
           number: 2,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "MethodDescriptorProto",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.ServiceDescriptorProto.method", f, service-descriptor-proto-method, service-descriptor-proto-method-setter, add-service-descriptor-proto-method);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "options",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "ServiceOptions",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.ServiceDescriptorProto.options", f, service-descriptor-proto-options, service-descriptor-proto-options-setter, #f);
end function initialize-<service-descriptor-proto>;
initialize-<service-descriptor-proto>();

define not-inline function initialize-<method-descriptor-proto> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "MethodDescriptorProto",
               field: fields);
  store("google.protobuf.MethodDescriptorProto", m, <method-descriptor-proto>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.MethodDescriptorProto.name", f, method-descriptor-proto-name, method-descriptor-proto-name-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "input_type",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.MethodDescriptorProto.input_type", f, method-descriptor-proto-input-type, method-descriptor-proto-input-type-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "output_type",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.MethodDescriptorProto.output_type", f, method-descriptor-proto-output-type, method-descriptor-proto-output-type-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "options",
           number: 4,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "MethodOptions",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.MethodDescriptorProto.options", f, method-descriptor-proto-options, method-descriptor-proto-options-setter, #f);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "client_streaming",
           number: 5,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.MethodDescriptorProto.client_streaming", f, method-descriptor-proto-client-streaming, method-descriptor-proto-client-streaming-setter, #f);
  let f5opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "server_streaming",
           number: 6,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f5opt);
  add!(fields, f);
  store("google.protobuf.MethodDescriptorProto.server_streaming", f, method-descriptor-proto-server-streaming, method-descriptor-proto-server-streaming-setter, #f);
end function initialize-<method-descriptor-proto>;
initialize-<method-descriptor-proto>();

define not-inline function initialize-<file-options-optimize-mode> ()
  let values = make(<stretchy-vector>);
  let e = make(<enum-descriptor-proto>,
               name: "OptimizeMode",
               value: values);
  store("google.protobuf.FileOptions.OptimizeMode", e, <file-options-optimize-mode>);
  let v = make(<enum-value-descriptor-proto>,
               name: "SPEED",
               number: 1);
  add!(values, v);
  store("google.protobuf.FileOptions.OptimizeMode.SPEED", v, $file-options-optimize-mode-speed);
  let v = make(<enum-value-descriptor-proto>,
               name: "CODE_SIZE",
               number: 2);
  add!(values, v);
  store("google.protobuf.FileOptions.OptimizeMode.CODE_SIZE", v, $file-options-optimize-mode-code-size);
  let v = make(<enum-value-descriptor-proto>,
               name: "LITE_RUNTIME",
               number: 3);
  add!(values, v);
  store("google.protobuf.FileOptions.OptimizeMode.LITE_RUNTIME", v, $file-options-optimize-mode-lite-runtime);
end function initialize-<file-options-optimize-mode>;
initialize-<file-options-optimize-mode>();

define not-inline function initialize-<file-options> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "FileOptions",
               field: fields);
  store("google.protobuf.FileOptions", m, <file-options>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "java_package",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.java_package", f, file-options-java-package, file-options-java-package-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "java_outer_classname",
           number: 8,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.java_outer_classname", f, file-options-java-outer-classname, file-options-java-outer-classname-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "java_multiple_files",
           number: 10,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.java_multiple_files", f, file-options-java-multiple-files, file-options-java-multiple-files-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "java_generate_equals_and_hash",
           number: 20,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.java_generate_equals_and_hash", f, file-options-java-generate-equals-and-hash, file-options-java-generate-equals-and-hash-setter, #f);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "java_string_check_utf8",
           number: 27,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.java_string_check_utf8", f, file-options-java-string-check-utf8, file-options-java-string-check-utf8-setter, #f);
  let f5opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "optimize_for",
           number: 9,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "OptimizeMode",
           extendee: #f,
           default-value: "SPEED",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f5opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.optimize_for", f, file-options-optimize-for, file-options-optimize-for-setter, #f);
  let f6opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "go_package",
           number: 11,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f6opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.go_package", f, file-options-go-package, file-options-go-package-setter, #f);
  let f7opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "cc_generic_services",
           number: 16,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f7opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.cc_generic_services", f, file-options-cc-generic-services, file-options-cc-generic-services-setter, #f);
  let f8opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "java_generic_services",
           number: 17,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f8opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.java_generic_services", f, file-options-java-generic-services, file-options-java-generic-services-setter, #f);
  let f9opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "py_generic_services",
           number: 18,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f9opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.py_generic_services", f, file-options-py-generic-services, file-options-py-generic-services-setter, #f);
  let f10opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "php_generic_services",
           number: 42,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f10opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.php_generic_services", f, file-options-php-generic-services, file-options-php-generic-services-setter, #f);
  let f11opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "deprecated",
           number: 23,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f11opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.deprecated", f, file-options-deprecated, file-options-deprecated-setter, #f);
  let f12opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "cc_enable_arenas",
           number: 31,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "true",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f12opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.cc_enable_arenas", f, file-options-cc-enable-arenas, file-options-cc-enable-arenas-setter, #f);
  let f13opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "objc_class_prefix",
           number: 36,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f13opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.objc_class_prefix", f, file-options-objc-class-prefix, file-options-objc-class-prefix-setter, #f);
  let f14opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "csharp_namespace",
           number: 37,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f14opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.csharp_namespace", f, file-options-csharp-namespace, file-options-csharp-namespace-setter, #f);
  let f15opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "swift_prefix",
           number: 39,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f15opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.swift_prefix", f, file-options-swift-prefix, file-options-swift-prefix-setter, #f);
  let f16opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "php_class_prefix",
           number: 40,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f16opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.php_class_prefix", f, file-options-php-class-prefix, file-options-php-class-prefix-setter, #f);
  let f17opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "php_namespace",
           number: 41,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f17opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.php_namespace", f, file-options-php-namespace, file-options-php-namespace-setter, #f);
  let f18opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "php_metadata_namespace",
           number: 44,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f18opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.php_metadata_namespace", f, file-options-php-metadata-namespace, file-options-php-metadata-namespace-setter, #f);
  let f19opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "ruby_package",
           number: 45,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f19opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.ruby_package", f, file-options-ruby-package, file-options-ruby-package-setter, #f);
  let f20opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "uninterpreted_option",
           number: 999,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "UninterpretedOption",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f20opt);
  add!(fields, f);
  store("google.protobuf.FileOptions.uninterpreted_option", f, file-options-uninterpreted-option, file-options-uninterpreted-option-setter, add-file-options-uninterpreted-option);
end function initialize-<file-options>;
initialize-<file-options>();

define not-inline function initialize-<message-options> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "MessageOptions",
               field: fields);
  store("google.protobuf.MessageOptions", m, <message-options>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "message_set_wire_format",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.MessageOptions.message_set_wire_format", f, message-options-message-set-wire-format, message-options-message-set-wire-format-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "no_standard_descriptor_accessor",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.MessageOptions.no_standard_descriptor_accessor", f, message-options-no-standard-descriptor-accessor, message-options-no-standard-descriptor-accessor-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "deprecated",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.MessageOptions.deprecated", f, message-options-deprecated, message-options-deprecated-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "map_entry",
           number: 7,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.MessageOptions.map_entry", f, message-options-map-entry, message-options-map-entry-setter, #f);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "uninterpreted_option",
           number: 999,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "UninterpretedOption",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.MessageOptions.uninterpreted_option", f, message-options-uninterpreted-option, message-options-uninterpreted-option-setter, add-message-options-uninterpreted-option);
end function initialize-<message-options>;
initialize-<message-options>();

define not-inline function initialize-<field-options-ctype> ()
  let values = make(<stretchy-vector>);
  let e = make(<enum-descriptor-proto>,
               name: "CType",
               value: values);
  store("google.protobuf.FieldOptions.CType", e, <field-options-ctype>);
  let v = make(<enum-value-descriptor-proto>,
               name: "STRING",
               number: 0);
  add!(values, v);
  store("google.protobuf.FieldOptions.CType.STRING", v, $field-options-ctype-string);
  let v = make(<enum-value-descriptor-proto>,
               name: "CORD",
               number: 1);
  add!(values, v);
  store("google.protobuf.FieldOptions.CType.CORD", v, $field-options-ctype-cord);
  let v = make(<enum-value-descriptor-proto>,
               name: "STRING_PIECE",
               number: 2);
  add!(values, v);
  store("google.protobuf.FieldOptions.CType.STRING_PIECE", v, $field-options-ctype-string-piece);
end function initialize-<field-options-ctype>;
initialize-<field-options-ctype>();

define not-inline function initialize-<field-options-js-type> ()
  let values = make(<stretchy-vector>);
  let e = make(<enum-descriptor-proto>,
               name: "JSType",
               value: values);
  store("google.protobuf.FieldOptions.JSType", e, <field-options-js-type>);
  let v = make(<enum-value-descriptor-proto>,
               name: "JS_NORMAL",
               number: 0);
  add!(values, v);
  store("google.protobuf.FieldOptions.JSType.JS_NORMAL", v, $field-options-js-type-js-normal);
  let v = make(<enum-value-descriptor-proto>,
               name: "JS_STRING",
               number: 1);
  add!(values, v);
  store("google.protobuf.FieldOptions.JSType.JS_STRING", v, $field-options-js-type-js-string);
  let v = make(<enum-value-descriptor-proto>,
               name: "JS_NUMBER",
               number: 2);
  add!(values, v);
  store("google.protobuf.FieldOptions.JSType.JS_NUMBER", v, $field-options-js-type-js-number);
end function initialize-<field-options-js-type>;
initialize-<field-options-js-type>();

define not-inline function initialize-<field-options> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "FieldOptions",
               field: fields);
  store("google.protobuf.FieldOptions", m, <field-options>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "ctype",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "CType",
           extendee: #f,
           default-value: "STRING",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.FieldOptions.ctype", f, field-options-ctype, field-options-ctype-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "packed",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.FieldOptions.packed", f, field-options-packed, field-options-packed-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "jstype",
           number: 6,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "JSType",
           extendee: #f,
           default-value: "JS_NORMAL",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.FieldOptions.jstype", f, field-options-jstype, field-options-jstype-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "lazy",
           number: 5,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.FieldOptions.lazy", f, field-options-lazy, field-options-lazy-setter, #f);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "unverified_lazy",
           number: 15,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.FieldOptions.unverified_lazy", f, field-options-unverified-lazy, field-options-unverified-lazy-setter, #f);
  let f5opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "deprecated",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f5opt);
  add!(fields, f);
  store("google.protobuf.FieldOptions.deprecated", f, field-options-deprecated, field-options-deprecated-setter, #f);
  let f6opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "weak",
           number: 10,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f6opt);
  add!(fields, f);
  store("google.protobuf.FieldOptions.weak", f, field-options-weak, field-options-weak-setter, #f);
  let f7opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "uninterpreted_option",
           number: 999,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "UninterpretedOption",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f7opt);
  add!(fields, f);
  store("google.protobuf.FieldOptions.uninterpreted_option", f, field-options-uninterpreted-option, field-options-uninterpreted-option-setter, add-field-options-uninterpreted-option);
end function initialize-<field-options>;
initialize-<field-options>();

define not-inline function initialize-<oneof-options> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "OneofOptions",
               field: fields);
  store("google.protobuf.OneofOptions", m, <oneof-options>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "uninterpreted_option",
           number: 999,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "UninterpretedOption",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.OneofOptions.uninterpreted_option", f, oneof-options-uninterpreted-option, oneof-options-uninterpreted-option-setter, add-oneof-options-uninterpreted-option);
end function initialize-<oneof-options>;
initialize-<oneof-options>();

define not-inline function initialize-<enum-options> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "EnumOptions",
               field: fields);
  store("google.protobuf.EnumOptions", m, <enum-options>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "allow_alias",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.EnumOptions.allow_alias", f, enum-options-allow-alias, enum-options-allow-alias-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "deprecated",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.EnumOptions.deprecated", f, enum-options-deprecated, enum-options-deprecated-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "uninterpreted_option",
           number: 999,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "UninterpretedOption",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.EnumOptions.uninterpreted_option", f, enum-options-uninterpreted-option, enum-options-uninterpreted-option-setter, add-enum-options-uninterpreted-option);
end function initialize-<enum-options>;
initialize-<enum-options>();

define not-inline function initialize-<enum-value-options> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "EnumValueOptions",
               field: fields);
  store("google.protobuf.EnumValueOptions", m, <enum-value-options>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "deprecated",
           number: 1,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.EnumValueOptions.deprecated", f, enum-value-options-deprecated, enum-value-options-deprecated-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "uninterpreted_option",
           number: 999,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "UninterpretedOption",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.EnumValueOptions.uninterpreted_option", f, enum-value-options-uninterpreted-option, enum-value-options-uninterpreted-option-setter, add-enum-value-options-uninterpreted-option);
end function initialize-<enum-value-options>;
initialize-<enum-value-options>();

define not-inline function initialize-<service-options> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "ServiceOptions",
               field: fields);
  store("google.protobuf.ServiceOptions", m, <service-options>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "deprecated",
           number: 33,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.ServiceOptions.deprecated", f, service-options-deprecated, service-options-deprecated-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "uninterpreted_option",
           number: 999,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "UninterpretedOption",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.ServiceOptions.uninterpreted_option", f, service-options-uninterpreted-option, service-options-uninterpreted-option-setter, add-service-options-uninterpreted-option);
end function initialize-<service-options>;
initialize-<service-options>();

define not-inline function initialize-<method-options-idempotency-level> ()
  let values = make(<stretchy-vector>);
  let e = make(<enum-descriptor-proto>,
               name: "IdempotencyLevel",
               value: values);
  store("google.protobuf.MethodOptions.IdempotencyLevel", e, <method-options-idempotency-level>);
  let v = make(<enum-value-descriptor-proto>,
               name: "IDEMPOTENCY_UNKNOWN",
               number: 0);
  add!(values, v);
  store("google.protobuf.MethodOptions.IdempotencyLevel.IDEMPOTENCY_UNKNOWN", v, $method-options-idempotency-level-idempotency-unknown);
  let v = make(<enum-value-descriptor-proto>,
               name: "NO_SIDE_EFFECTS",
               number: 1);
  add!(values, v);
  store("google.protobuf.MethodOptions.IdempotencyLevel.NO_SIDE_EFFECTS", v, $method-options-idempotency-level-no-side-effects);
  let v = make(<enum-value-descriptor-proto>,
               name: "IDEMPOTENT",
               number: 2);
  add!(values, v);
  store("google.protobuf.MethodOptions.IdempotencyLevel.IDEMPOTENT", v, $method-options-idempotency-level-idempotent);
end function initialize-<method-options-idempotency-level>;
initialize-<method-options-idempotency-level>();

define not-inline function initialize-<method-options> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "MethodOptions",
               field: fields);
  store("google.protobuf.MethodOptions", m, <method-options>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "deprecated",
           number: 33,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: "false",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.MethodOptions.deprecated", f, method-options-deprecated, method-options-deprecated-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "idempotency_level",
           number: 34,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "IdempotencyLevel",
           extendee: #f,
           default-value: "IDEMPOTENCY_UNKNOWN",
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.MethodOptions.idempotency_level", f, method-options-idempotency-level, method-options-idempotency-level-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "uninterpreted_option",
           number: 999,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "UninterpretedOption",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.MethodOptions.uninterpreted_option", f, method-options-uninterpreted-option, method-options-uninterpreted-option-setter, add-method-options-uninterpreted-option);
end function initialize-<method-options>;
initialize-<method-options>();

define not-inline function initialize-<uninterpreted-option-name-part> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "NamePart",
               field: fields);
  store("google.protobuf.UninterpretedOption.NamePart", m, <uninterpreted-option-name-part>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name_part",
           number: 1,
           label: $field-descriptor-proto-label-label-required,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.UninterpretedOption.NamePart.name_part", f, uninterpreted-option-name-part-name-part, uninterpreted-option-name-part-name-part-setter, #f);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "is_extension",
           number: 2,
           label: $field-descriptor-proto-label-label-required,
           type: #f,
           type-name: "bool",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.UninterpretedOption.NamePart.is_extension", f, uninterpreted-option-name-part-is-extension, uninterpreted-option-name-part-is-extension-setter, #f);
end function initialize-<uninterpreted-option-name-part>;
initialize-<uninterpreted-option-name-part>();

define not-inline function initialize-<uninterpreted-option> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "UninterpretedOption",
               field: fields);
  store("google.protobuf.UninterpretedOption", m, <uninterpreted-option>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "name",
           number: 2,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "NamePart",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.UninterpretedOption.name", f, uninterpreted-option-name, uninterpreted-option-name-setter, add-uninterpreted-option-name);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "identifier_value",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.UninterpretedOption.identifier_value", f, uninterpreted-option-identifier-value, uninterpreted-option-identifier-value-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "positive_int_value",
           number: 4,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "uint64",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.UninterpretedOption.positive_int_value", f, uninterpreted-option-positive-int-value, uninterpreted-option-positive-int-value-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "negative_int_value",
           number: 5,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int64",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.UninterpretedOption.negative_int_value", f, uninterpreted-option-negative-int-value, uninterpreted-option-negative-int-value-setter, #f);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "double_value",
           number: 6,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "double",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.UninterpretedOption.double_value", f, uninterpreted-option-double-value, uninterpreted-option-double-value-setter, #f);
  let f5opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "string_value",
           number: 7,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "bytes",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f5opt);
  add!(fields, f);
  store("google.protobuf.UninterpretedOption.string_value", f, uninterpreted-option-string-value, uninterpreted-option-string-value-setter, #f);
  let f6opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "aggregate_value",
           number: 8,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f6opt);
  add!(fields, f);
  store("google.protobuf.UninterpretedOption.aggregate_value", f, uninterpreted-option-aggregate-value, uninterpreted-option-aggregate-value-setter, #f);
end function initialize-<uninterpreted-option>;
initialize-<uninterpreted-option>();

define not-inline function initialize-<source-code-info-location> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "Location",
               field: fields);
  store("google.protobuf.SourceCodeInfo.Location", m, <source-code-info-location>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "path",
           number: 1,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.SourceCodeInfo.Location.path", f, source-code-info-location-path, source-code-info-location-path-setter, add-source-code-info-location-path);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "span",
           number: 2,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.SourceCodeInfo.Location.span", f, source-code-info-location-span, source-code-info-location-span-setter, add-source-code-info-location-span);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "leading_comments",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.SourceCodeInfo.Location.leading_comments", f, source-code-info-location-leading-comments, source-code-info-location-leading-comments-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "trailing_comments",
           number: 4,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.SourceCodeInfo.Location.trailing_comments", f, source-code-info-location-trailing-comments, source-code-info-location-trailing-comments-setter, #f);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "leading_detached_comments",
           number: 6,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.SourceCodeInfo.Location.leading_detached_comments", f, source-code-info-location-leading-detached-comments, source-code-info-location-leading-detached-comments-setter, add-source-code-info-location-leading-detached-comments);
end function initialize-<source-code-info-location>;
initialize-<source-code-info-location>();

define not-inline function initialize-<source-code-info> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "SourceCodeInfo",
               field: fields);
  store("google.protobuf.SourceCodeInfo", m, <source-code-info>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "location",
           number: 1,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "Location",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.SourceCodeInfo.location", f, source-code-info-location, source-code-info-location-setter, add-source-code-info-location);
end function initialize-<source-code-info>;
initialize-<source-code-info>();

define not-inline function initialize-<generated-code-info-annotation-semantic> ()
  let values = make(<stretchy-vector>);
  let e = make(<enum-descriptor-proto>,
               name: "Semantic",
               value: values);
  store("google.protobuf.GeneratedCodeInfo.Annotation.Semantic", e, <generated-code-info-annotation-semantic>);
  let v = make(<enum-value-descriptor-proto>,
               name: "NONE",
               number: 0);
  add!(values, v);
  store("google.protobuf.GeneratedCodeInfo.Annotation.Semantic.NONE", v, $generated-code-info-annotation-semantic-none);
  let v = make(<enum-value-descriptor-proto>,
               name: "SET",
               number: 1);
  add!(values, v);
  store("google.protobuf.GeneratedCodeInfo.Annotation.Semantic.SET", v, $generated-code-info-annotation-semantic-set);
  let v = make(<enum-value-descriptor-proto>,
               name: "ALIAS",
               number: 2);
  add!(values, v);
  store("google.protobuf.GeneratedCodeInfo.Annotation.Semantic.ALIAS", v, $generated-code-info-annotation-semantic-alias);
end function initialize-<generated-code-info-annotation-semantic>;
initialize-<generated-code-info-annotation-semantic>();

define not-inline function initialize-<generated-code-info-annotation> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "Annotation",
               field: fields);
  store("google.protobuf.GeneratedCodeInfo.Annotation", m, <generated-code-info-annotation>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "path",
           number: 1,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.GeneratedCodeInfo.Annotation.path", f, generated-code-info-annotation-path, generated-code-info-annotation-path-setter, add-generated-code-info-annotation-path);
  let f1opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "source_file",
           number: 2,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "string",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f1opt);
  add!(fields, f);
  store("google.protobuf.GeneratedCodeInfo.Annotation.source_file", f, generated-code-info-annotation-source-file, generated-code-info-annotation-source-file-setter, #f);
  let f2opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "begin",
           number: 3,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f2opt);
  add!(fields, f);
  store("google.protobuf.GeneratedCodeInfo.Annotation.begin", f, generated-code-info-annotation-begin, generated-code-info-annotation-begin-setter, #f);
  let f3opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "end",
           number: 4,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "int32",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f3opt);
  add!(fields, f);
  store("google.protobuf.GeneratedCodeInfo.Annotation.end", f, generated-code-info-annotation-end, generated-code-info-annotation-end-setter, #f);
  let f4opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "semantic",
           number: 5,
           label: $field-descriptor-proto-label-label-optional,
           type: #f,
           type-name: "Semantic",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f4opt);
  add!(fields, f);
  store("google.protobuf.GeneratedCodeInfo.Annotation.semantic", f, generated-code-info-annotation-semantic, generated-code-info-annotation-semantic-setter, #f);
end function initialize-<generated-code-info-annotation>;
initialize-<generated-code-info-annotation>();

define not-inline function initialize-<generated-code-info> ()
  let fields = make(<stretchy-vector>);
  let m = make(<descriptor-proto>,
               name: "GeneratedCodeInfo",
               field: fields);
  store("google.protobuf.GeneratedCodeInfo", m, <generated-code-info>);
  let f0opt = make(<field-options>); // TODO: ...set field options...
  let f
    = make(<field-descriptor-proto>,
           name: "annotation",
           number: 1,
           label: $field-descriptor-proto-label-label-repeated,
           type: #f,
           type-name: "Annotation",
           extendee: #f,
           default-value: #f,
           oneof-index: #f,
           json-name: #f,
           proto3-optional: #f,
           options: f0opt);
  add!(fields, f);
  store("google.protobuf.GeneratedCodeInfo.annotation", f, generated-code-info-annotation, generated-code-info-annotation-setter, add-generated-code-info-annotation);
end function initialize-<generated-code-info>;
initialize-<generated-code-info>();

